#!groovy

AWS_CREDENTIALS_ID = 'ck_targeting_aws'
SSH_CREDENTIALS_ID = 'jenkins_ssk_key'
STAGING_INSTANCE_HOST = 'ck-targeting-staging.mvpf.in'
AWS_REGION = 'eu-central-1'
AWS_ECR_ID = '204914485727'
AWS_FRONTEND_ECR_LOCATION = '204914485727.dkr.ecr.eu-central-1.amazonaws.com/stagingckfrontend'

node {
  if (env.BRANCH_NAME == 'develop') {
    deployToStaging()
  }

  if (env.BRANCH_NAME.startsWith('release_v')) {
    deployToStaging()
  }

  /* if (env.BRANCH_NAME == 'master') {
    deployToProduction()
  } */
}

def deployToStaging() {
  try {
    stage('Checkout') {
      checkout scm
    }

    GIT_COMMIT_HASH = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)

    imageTag = GIT_COMMIT_HASH
    imageName = AWS_FRONTEND_ECR_LOCATION + ':' + imageTag

    stage('Build and push Docker image') {
      withCredentials([
        [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID, accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
      ]) {
        sh '$(aws ecr get-login --region ' + AWS_REGION + ' --registry-ids ' + AWS_ECR_ID + ' --no-include-email)'

        sh 'docker build --rm=true --pull=true -f ops/staging/Dockerfile -t ' + imageName + ' .'
        sh 'docker push ' + imageName
      }
    }

    stage('Deploying') {
      withCredentials([
        [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID, accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
      ]) {
        sshagent([SSH_CREDENTIALS_ID]) {
          sh 'echo SSH_AUTH_SOCK=$SSH_AUTH_SOCK'
          sh 'ls -al $SSH_AUTH_SOCK || true'

          sh 'scp -o StrictHostKeyChecking=no ops/staging/deploy.sh ubuntu@' + STAGING_INSTANCE_HOST + ':/home/ubuntu/deploy_frontend.sh'

          sh 'ssh -o StrictHostKeyChecking=no ubuntu@' + STAGING_INSTANCE_HOST +
            ' bash /home/ubuntu/deploy_frontend.sh ' +
            imageTag + ' ' +
            AWS_REGION + ' ' +
            AWS_ECR_ID + ' '
        }
      }
    }
  } catch (Exception e) {
    throw e
  } finally {
    stage('Cleanup') {
      cleanup()
    }
  }
}

def cleanup() {
  try {
    cleanWs()

    /* sh 'docker rm $(docker ps -qa --no-trunc --filter "status=exited")';
    sh 'docker rmi $(docker images --filter "dangling=true" -q --no-trunc)';
    sh 'docker rmi $(docker images | grep "none" | awk \'/ / { print $3 }\')'; */
  } catch (Exception e) {}
}